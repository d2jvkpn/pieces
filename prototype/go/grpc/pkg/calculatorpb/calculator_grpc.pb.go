// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	// PrimeNumberDecomposition
	PND(ctx context.Context, in *Number, opts ...grpc.CallOption) (CalculatorService_PNDClient, error)
	Multiply(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_MultiplyClient, error)
}

type calculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiceClient(cc grpc.ClientConnInterface) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) PND(ctx context.Context, in *Number, opts ...grpc.CallOption) (CalculatorService_PNDClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[0], "/calculatorpb.CalculatorService/PND", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServicePNDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_PNDClient interface {
	Recv() (*Number, error)
	grpc.ClientStream
}

type calculatorServicePNDClient struct {
	grpc.ClientStream
}

func (x *calculatorServicePNDClient) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) Multiply(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_MultiplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[1], "/calculatorpb.CalculatorService/Multiply", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceMultiplyClient{stream}
	return x, nil
}

type CalculatorService_MultiplyClient interface {
	Send(*Number) error
	CloseAndRecv() (*Number, error)
	grpc.ClientStream
}

type calculatorServiceMultiplyClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceMultiplyClient) Send(m *Number) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceMultiplyClient) CloseAndRecv() (*Number, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
// All implementations must embed UnimplementedCalculatorServiceServer
// for forward compatibility
type CalculatorServiceServer interface {
	// PrimeNumberDecomposition
	PND(*Number, CalculatorService_PNDServer) error
	Multiply(CalculatorService_MultiplyServer) error
	// mustEmbedUnimplementedCalculatorServiceServer()
}

// UnimplementedCalculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (UnimplementedCalculatorServiceServer) PND(*Number, CalculatorService_PNDServer) error {
	return status.Errorf(codes.Unimplemented, "method PND not implemented")
}
func (UnimplementedCalculatorServiceServer) Multiply(CalculatorService_MultiplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedCalculatorServiceServer) mustEmbedUnimplementedCalculatorServiceServer() {}

// UnsafeCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServiceServer will
// result in compilation errors.
type UnsafeCalculatorServiceServer interface {
	mustEmbedUnimplementedCalculatorServiceServer()
}

func RegisterCalculatorServiceServer(s grpc.ServiceRegistrar, srv CalculatorServiceServer) {
	s.RegisterService(&CalculatorService_ServiceDesc, srv)
}

func _CalculatorService_PND_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Number)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).PND(m, &calculatorServicePNDServer{stream})
}

type CalculatorService_PNDServer interface {
	Send(*Number) error
	grpc.ServerStream
}

type calculatorServicePNDServer struct {
	grpc.ServerStream
}

func (x *calculatorServicePNDServer) Send(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_Multiply_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).Multiply(&calculatorServiceMultiplyServer{stream})
}

type CalculatorService_MultiplyServer interface {
	SendAndClose(*Number) error
	Recv() (*Number, error)
	grpc.ServerStream
}

type calculatorServiceMultiplyServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceMultiplyServer) SendAndClose(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceMultiplyServer) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorService_ServiceDesc is the grpc.ServiceDesc for CalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculatorpb.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PND",
			Handler:       _CalculatorService_PND_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Multiply",
			Handler:       _CalculatorService_Multiply_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/calculatorpb/calculator.proto",
}
